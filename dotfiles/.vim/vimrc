set nocompatible                " Make Vim behave in a more useful way

filetype plugin on              " Enable plugins
filetype indent on              " Load indent files

nnoremap <SPACE> <Nop>
let mapleader=" "               " Set <Leader> key

"===== TERMINAL ================================================================
set ttyfast                     " Fast terminal connection (smooth redrawing)
set lazyredraw                  " Redraw only when we need to.

"===== CLIPBOARD ===============================================================
" Use the desktop clipboard as default register
set clipboard=unnamed
" Emulate Ctrl+C, Ctrl+X and Ctrl+V
:vnoremap <C-c> "+y
:vnoremap <C-x> "+d
:inoremap <C-v> <ESC>"+pa
" Yank to the end of the line (consistent with C and D)
nnoremap Y y$

"===== COLORS ==================================================================
if exists('+termguicolors')
  set termguicolors
else
  set t_Co=256
endif
syntax on
set background=dark
colorscheme quiet

"===== MESSAGES AND INFO =======================================================
set ruler                       " Show the line and column number of the cursor
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

"===== DISPLAYING TEXT =========================================================
set list                        " Show invisible characters
set lcs=tab:>.,trail:.          " ...but only tabs and trailing whitespace

"===== EDITING TEXT ============================================================
set showmatch                   " Highlight matching brackets
set tags=tags                   " Enable ctags

"===== TABS AND INDENTING ======================================================
set softtabstop=4               " Tab indentation levels every four columns
set shiftwidth=4                " Indent/outdent by four columns
set expandtab                   " Convert all tabs that are typed into spaces
set autoindent                  " Retain indentation on next line

"===== READING AND WRITING FILES ===============================================
set cursorline                  " Find the current line quickly.

"===== COMMAND LINE EDITING ====================================================
set showmode                    " Show current mode in command-line.
set wildmenu                    " Improved command-line completion
set wildmode=full               " Complete the next full match

"===== SEARCHING ===============================================================
set incsearch                   " Search as characters are entered
set hlsearch                    " Highlight all matches
set ignorecase                  " Ignore case in all searches...
set smartcase                   " ...unless uppercase letters used

" Clear current search highlighting with <C-L>
nnoremap <silent> <C-L> :noh<CR>

"===== MULTIPLE WINDOWS ========================================================
set laststatus=2        " Always display the status line
set equalalways         " Make all windows the same size when adding/removing
set splitbelow          " Put the new window below
set splitright          " Put the new window right

"===== BACKUPS =================================================================
let s:vim_backup = expand('$HOME/.vim/files/backup')
if filewritable(s:vim_backup) == 0 && exists("*mkdir")
    call mkdir(s:vim_backup, "p", 0700)
endif

let s:vim_swap = expand('$HOME/.vim/files/swap')
if filewritable(s:vim_swap) == 0 && exists("*mkdir")
    call mkdir(s:vim_swap, "p", 0700)
endif

let s:vim_undo = expand('$HOME/.vim/files/undo')
if filewritable(s:vim_undo) == 0 && exists("*mkdir")
    call mkdir(s:vim_undo, "p", 0700)
endif

let s:vim_info = expand('$HOME/.vim/files/info')
if filewritable(s:vim_info) == 0 && exists("*mkdir")
    call mkdir(s:vim_info, "p", 0700)
endif

set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap/
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo
