#!/usr/bin/env python3
"""
Sync dotfiles from the repository into the target directory.
Creates symlinks for files and ensures directories exist.
Optional --backup: rename existing files with .bak before linking.
"""

import os
import sys
from pathlib import Path

# Parse arguments
backup_flag = False
target_arg = None

for arg in sys.argv[1:]:
    if arg in ("--backup", "-b"):
        backup_flag = True
    else:
        target_arg = arg

target_dir = Path(target_arg if target_arg else Path.home()).expanduser()
dotfiles_dir = Path(__file__).resolve().parent.parent / "dotfiles"

if not dotfiles_dir.is_dir():
    print(f"Error: dotfiles directory not found: {dotfiles_dir}")
    sys.exit(1)

target_dir.mkdir(parents=True, exist_ok=True)
print(f"Syncing dotfiles from {dotfiles_dir} to {target_dir} (backup={backup_flag})")

for src in dotfiles_dir.rglob("*"):
    if src.name.endswith("~"):
        continue

    rel_path = src.relative_to(dotfiles_dir)
    dest = target_dir / rel_path

    if src.is_dir():
        dest.mkdir(parents=True, exist_ok=True)
    else:
        if dest.exists() or dest.is_symlink():
            if backup_flag:
                backup_path = dest.with_suffix(dest.suffix + ".bak")
                dest.rename(backup_path)
                print(f"Backed up: {dest} -> {backup_path}")
            else:
                dest.unlink()
        dest.parent.mkdir(parents=True, exist_ok=True)
        dest.symlink_to(src)
        print(f"Linked: {src} -> {dest}")

print("Dotfiles sync complete.")

